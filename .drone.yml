---
kind: pipeline
type: docker
name: default

clone:
  disable: true

volumes:
- name: deps
  temp: {}

steps:
- name: clone
  image: alpine/git
  pull: if-not-exists
  environment:
    SSH_KEY:
      from_secret: SSH_KEY
    SSH_HOST:
      from_secret: SSH_HOST
    SSH_PORT:
      from_secret: SSH_PORT
  commands:
  - mkdir $HOME/.ssh && echo "$SSH_KEY" > $HOME/.ssh/id_rsa && chmod 600 $HOME/.ssh/id_rsa
  - |
    [[ -n "$${SSH_PORT}" ]] && [[ -n "$${SSH_HOST}" ]] && ssh-keyscan -p $${SSH_PORT} $${SSH_HOST} >> $HOME/.ssh/known_hosts
  - |
    [[ -z "$${SSH_PORT}" ]] && [[ -n "$${SSH_HOST}" ]] && ssh-keyscan $${SSH_HOST} >> $HOME/.ssh/known_hosts
  - git clone ${DRONE_GIT_SSH_URL} .
  - git checkout -b drone-pipeline ${DRONE_COMMIT}

- name: linter
  image: golangci/golangci-lint:latest-alpine
  pull: if-not-exists
  environment:
    GOPROXY:
      from_secret: GOPROXY
  volumes:
    - name: deps
      path: /go
  commands:
    - golangci-lint run

- name: test
  image: golang:latest
  pull: if-not-exists
  environment:
    GOPROXY:
      from_secret: GOPROXY
  volumes:
    - name: deps
      path: /go
  commands:
    - go test -v ./...

- name: build
  image: golang:latest
  pull: if-not-exists
  environment:
    GOPROXY:
      from_secret: GOPROXY
  volumes:
    - name: deps
      path: /go
  commands:
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build

- name: notification
  image: lddsb/drone-dingtalk-message
  pull: if-not-exists
  settings:
    token:
      from_secret: DINGTALK_TOKEN
    type: markdown
    secret:
      from_secret: DINGTALK_SECRET
    sha_link: true
    message_color: true
    message_pic: true
  when:
    status:
      - success
      - failure

trigger:
  branch:
    - develop
    - master
  event:
    - push
    - pull_request

---
kind: pipeline
type: docker
name: tag

clone:
  disable: true

volumes:
- name: deps
  temp: {}

steps:
- name: clone
  image: alpine/git
  pull: if-not-exists
  environment:
    SSH_KEY:
      from_secret: SSH_KEY
    SSH_HOST:
      from_secret: SSH_HOST
    SSH_PORT:
      from_secret: SSH_PORT
  commands:
  - mkdir $HOME/.ssh && echo "$SSH_KEY" > $HOME/.ssh/id_rsa && chmod 600 $HOME/.ssh/id_rsa
  - |
    [[ -n "$${SSH_PORT}" ]] && [[ -n "$${SSH_HOST}" ]] && ssh-keyscan -p $${SSH_PORT} $${SSH_HOST} >> $HOME/.ssh/known_hosts
  - |
    [[ -z "$${SSH_PORT}" ]] && [[ -n "$${SSH_HOST}" ]] && ssh-keyscan $${SSH_HOST} >> $HOME/.ssh/known_hosts
  - git clone ${DRONE_GIT_SSH_URL} .
  - git fetch --tags
  - git checkout -b drone-pipeline ${DRONE_TAG}

- name: linter
  image: golangci/golangci-lint:latest-alpine
  pull: if-not-exists
  environment:
    GOPROXY:
      from_secret: GOPROXY
  volumes:
    - name: deps
      path: /go
  commands:
    - golangci-lint run

- name: test
  image: golang:latest
  pull: if-not-exists
  environment:
    GOPROXY:
      from_secret: GOPROXY
  volumes:
    - name: deps
      path: /go
  commands:
    - go test -v ./...

- name: build
  image: golang:latest
  pull: if-not-exists
  environment:
    GOPROXY:
      from_secret: GOPROXY
  volumes:
    - name: deps
      path: /go
  commands:
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build

- name: publish
  image: plugins/docker
  pull: if-not-exists
  settings:
    auto_tag: true
    username:
      from_secret: DOCKER_REGISTRY_USERNAME
    password:
      from_secret: DOCKER_REGISTRY_PASSWORD
    repo:
      from_secret: DOCKER_REPO
    registry:
      from_secret: DOCKER_REGISTRY

- name: notification
  image: lddsb/drone-dingtalk-message
  pull: if-not-exists
  settings:
    token:
      from_secret: DINGTALK_TOKEN
    type: markdown
    secret:
      from_secret: DINGTALK_SECRET
    sha_link: true
    message_color: true
    message_pic: true
  when:
    status:
      - success
      - failure

trigger:
  event:
    - tag

---
kind: pipeline
type: docker
name: promote

clone:
  disable: true

volumes:
- name: deps
  temp: {}

steps:
- name: clone
  image: alpine/git
  pull: if-not-exists
  environment:
    SSH_KEY:
      from_secret: SSH_KEY
    SSH_HOST:
      from_secret: SSH_HOST
    SSH_PORT:
      from_secret: SSH_PORT
  commands:
  - mkdir $HOME/.ssh && echo "$SSH_KEY" > $HOME/.ssh/id_rsa && chmod 600 $HOME/.ssh/id_rsa
  - |
    [[ -n "$${SSH_PORT}" ]] && [[ -n "$${SSH_HOST}" ]] && ssh-keyscan -p $${SSH_PORT} $${SSH_HOST} >> $HOME/.ssh/known_hosts
  - |
    [[ -z "$${SSH_PORT}" ]] && [[ -n "$${SSH_HOST}" ]] && ssh-keyscan $${SSH_HOST} >> $HOME/.ssh/known_hosts
  - git clone ${DRONE_GIT_SSH_URL} .
  - git checkout -b drone-pipeline ${DRONE_COMMIT}

- name: linter
  image: golangci/golangci-lint:latest-alpine
  pull: if-not-exists
  environment:
    GOPROXY:
      from_secret: GOPROXY
  volumes:
    - name: deps
      path: /go
  commands:
    - golangci-lint run

- name: test
  image: golang:latest
  pull: if-not-exists
  environment:
    GOPROXY:
      from_secret: GOPROXY
  volumes:
    - name: deps
      path: /go
  commands:
    - go test -v ./...

- name: build
  image: golang:latest
  pull: if-not-exists
  environment:
    GOPROXY:
      from_secret: GOPROXY
  volumes:
    - name: deps
      path: /go
  commands:
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build

- name: publish
  image: plugins/docker
  pull: if-not-exists
  settings:
    auto_tag: true
    username:
      from_secret: DOCKER_REGISTRY_USERNAME
    password:
      from_secret: DOCKER_REGISTRY_PASSWORD
    repo:
      from_secret: DOCKER_REPO
    registry:
      from_secret: DOCKER_REGISTRY

# 可以根据自己的实际项目情况，完成部署上线的 step
#- name: deploy
#  image: user/repo
# deploy step placeholder

- name: notification
  image: lddsb/drone-dingtalk-message
  pull: if-not-exists
  settings:
    token:
      from_secret: DINGTALK_TOKEN
    type: markdown
    secret:
      from_secret: DINGTALK_SECRET
    sha_link: true
    message_color: true
    message_pic: true
  when:
    status:
      - success
      - failure

trigger:
  event:
    - promote
  target:
    - production
